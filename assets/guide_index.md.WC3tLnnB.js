import{_ as r}from"./chunks/ShikiMiniPlayground.vue_vue_type_style_index_0_lang.5xpE92ot.js";import{_ as l,k as s,q as n,D as e,ak as a,W as o,s as i}from"./chunks/framework.DuiFwSgy.js";import"./chunks/theme.Deth-q9v.js";const m=JSON.parse('{"title":"简介","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/index.md","filePath":"guide/index.md","lastUpdated":1755264644000}'),h={name:"guide/index.md"};function g(p,t,c,f,u,_){const d=r;return n(),s("div",null,[t[0]||(t[0]=e("h1",{id:"简介",tabindex:"-1"},[i("简介 "),e("a",{class:"header-anchor",href:"#简介","aria-label":"Permalink to “简介”"},"​")],-1)),t[1]||(t[1]=e("br",null,null,-1)),t[2]||(t[2]=e("p",null,[e("span",{"text-brand-yellow":"","text-xl":""},"Shiki"),i(),e("span",{op75:""},[i("(式，一个日语词汇，意为 "),e("a",{href:"https://jisho.org/word/%E5%BC%8F",target:"_blank",rel:"noreferrer"},"“样式”"),i(")")]),i(" 是一款美观而强大的代码语法高亮器，它与 VS Code 的语法高亮引擎一样，基于 TextMate 的语法及主题。Shiki 能为几乎所有主流编程语言提供非常准确且快速的语法高亮。")],-1)),t[3]||(t[3]=a('<p>你不需要维护自定义的正则表达式，不需要维护自定义的 CSS，也不需要维护自定义的 HTML；因为你在 VS Code 中使用的颜色主题一样可以用在 Shiki 上。</p><p>顺带一提，如你所想，本文档站点中的所有代码块都是由 Shiki 高亮的。</p><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to “功能”">​</a></h2><ul><li>所有语法 / 主题 / WASM 都是纯 ESM，可以按需懒加载，对捆绑器友好</li><li>高度通用，不依赖于 Node.js 的 API 和文件系统，可以在任何现代 JavaScript 运行时上运行</li><li>默认仅支持 ESM，不过你依然可以<a href="/guide/install#cdn-usage">使用 CDN</a> 或<a href="/guide/install#cjs-usage">使用 CJS</a></li><li><a href="/guide/bundles#fine-grained-bundle">语言与主题的细粒度捆绑</a></li><li><a href="/guide/dual-themes">深浅色模式支持</a></li><li><a href="/guide/transformers#codetohast"><code>hast</code> 支持</a></li><li><a href="/guide/transformers">转换器 API</a></li><li><a href="/guide/decorations">代码装饰 API</a></li><li><a href="/packages/twoslash">TypeScript Twoslash 集成</a></li><li><a href="/guide/compat">兼容构建</a></li></ul><h2 id="演练场" tabindex="-1">演练场 <a class="header-anchor" href="#演练场" aria-label="Permalink to “演练场”">​</a></h2><p>这里为你提供了一个小演练场，可以试用 Shiki 来高亮你的代码。此演练场是在浏览器端渲染的，而本文档站点的其他代码块都是在构建时渲染并静态托管的，其相关主题和语言按需加载。</p>',6)),o(d),t[4]||(t[4]=a('<p>查看<a href="/guide/install">安装文档</a>来在你的项目里使用 Shiki。</p><h2 id="捆绑包大小" tabindex="-1">捆绑包大小 <a class="header-anchor" href="#捆绑包大小" aria-label="Permalink to “捆绑包大小”">​</a></h2><p>你可以在 <a href="https://pkg-size.dev/shiki" target="_blank" rel="noreferrer">pkg-size.dev/shiki</a> 上查看详细的捆绑包大小。</p><p>截止 <code>v1.1.6</code>，2024 年 2 月 22 日的数据如下：</p><table tabindex="0"><thead><tr><th>捆绑包</th><th style="text-align:right;">大小（minified）</th><th style="text-align:right;">大小（gzip）</th><th>备注</th></tr></thead><tbody><tr><td><code>shiki</code></td><td style="text-align:right;">6.9 MB</td><td style="text-align:right;">1.3 MB</td><td>所有主题和语言的异步块（chunks）</td></tr><tr><td><code>shiki/bundle/full</code></td><td style="text-align:right;">6.9 MB</td><td style="text-align:right;">1.3 MB</td><td>与 <code>shiki</code> 包相同</td></tr><tr><td><code>shiki/bundle/web</code></td><td style="text-align:right;">4.2 MB</td><td style="text-align:right;">748 KB</td><td>所有的主题和常用 Web 语言的异步块</td></tr><tr><td><code>shiki/core</code></td><td style="text-align:right;">106 KB</td><td style="text-align:right;">34 KB</td><td>不带任何主题和语言的核心引擎，需要你自己构建</td></tr><tr><td><code>shiki/wasm</code></td><td style="text-align:right;">623 KB</td><td style="text-align:right;">231 KB</td><td>以 BASE64 字符串形式内联的 WASM 二进制文件</td></tr></tbody></table>',5))])}const b=l(h,[["render",g]]);export{m as __pageData,b as default};
