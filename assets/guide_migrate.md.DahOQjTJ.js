import{_ as i,k as o,q as a,ak as c}from"./chunks/framework.DuiFwSgy.js";const g=JSON.parse('{"title":"迁移","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/migrate.md","filePath":"guide/migrate.md","lastUpdated":1755264644000}'),d={name:"guide/migrate.md"};function s(r,e,l,h,t,n){return a(),o("div",null,e[0]||(e[0]=[c('<h1 id="迁移" tabindex="-1">迁移 <a class="header-anchor" href="#迁移" aria-label="Permalink to “迁移”">​</a></h1><p>我们建议您逐步迁移，按照每个版本的迁移指南进行操作。</p><h2 id="从-v2-0-迁移" tabindex="-1">从 v2.0 迁移 <a class="header-anchor" href="#从-v2-0-迁移" aria-label="Permalink to “从 v2.0 迁移”">​</a></h2><p>如果您在 v2.0 上且在使用中没有警告，您应该能够直接升级到 v3.0，详细信息请阅读 <a href="/blog/v3">Shiki v3.0</a>。</p><h2 id="从-v1-0-迁移" tabindex="-1">从 v1.0 迁移 <a class="header-anchor" href="#从-v1-0-迁移" aria-label="Permalink to “从 v1.0 迁移”">​</a></h2><p>我们建议您首先 <a href="/blog/v2">迁移到 v2.0</a>，然后再迁移到 v3.0。</p><h2 id="从-v0-14-迁移" tabindex="-1">从 v0.14 迁移 <a class="header-anchor" href="#从-v0-14-迁移" aria-label="Permalink to “从 v0.14 迁移”">​</a></h2><p>Shiki 的 v1.0 版本是一次重大的重写，我们利用这个机会重新审视了过去做出的每一个设计决策。我们最初有一个单独的包名 <a href="https://github.com/antfu/shikiji" target="_blank" rel="noreferrer">Shikiji</a> 来实验新的设计，现在它已合并回 Shiki，成为 v1.0。</p><div class="tip custom-block github-alert"><p class="custom-block-title">了解更多</p><p>有兴趣了解 v1.0 背后的故事吗？请查看这篇 <a href="https://nuxt.com/blog/shiki-v1" target="_blank" rel="noreferrer">博客文章</a> 获取更多细节。</p></div><p>与 <a href="https://github.com/shikijs/shiki/releases/tag/v0.14.3" target="_blank" rel="noreferrer"><code>shiki@0.14.3</code></a> 相比，破坏性变更的列表如下：</p><h3 id="硬性破坏性变更" tabindex="-1">硬性破坏性变更 <a class="header-anchor" href="#硬性破坏性变更" aria-label="Permalink to “硬性破坏性变更”">​</a></h3><p>需要手动迁移的破坏性变更：</p><ul><li>CJS 和 IIFE 构建已被弃用。有关详细信息，请参见 <a href="/guide/install#cjs-usage">CJS 使用</a> 和 <a href="/guide/install#cdn-usage">CDN 使用</a>。</li><li><code>codeToHtml</code> 在内部使用 <a href="https://github.com/syntax-tree/hast" target="_blank" rel="noreferrer"><code>hast</code></a>。生成的 HTML 会稍有不同，但应该表现相同。</li><li>不再支持 <code>css-variables</code> 主题。请改用 <a href="/guide/dual-themes">双主题</a> 方法，或在 <a href="/guide/theme-colors">主题颜色处理</a> 页面了解更多信息。</li></ul><h3 id="软性破坏性变更" tabindex="-1">软性破坏性变更 <a class="header-anchor" href="#软性破坏性变更" aria-label="Permalink to “软性破坏性变更”">​</a></h3><p>破坏性变更适用于主包 <code>shiki</code>，但通过 <a href="/guide/compat#compatibility-build">兼容构建 <code>@shikijs/compat</code></a> 进行了兼容处理：</p><ul><li>顶层命名导出 <code>setCDN</code>、<code>loadLanguage</code>、<code>loadTheme</code>、<code>setWasm</code> 已被弃用，因为不再需要。</li><li><code>BUNDLED_LANGUAGES</code>、<code>BUNDLED_THEMES</code> 已移至 <code>@shikijs/langs</code> 和 <code>@shikijs/themes</code>，并分别重命名为 <code>bundledLanguages</code> 和 <code>bundledThemes</code>。</li><li><code>createHighlighter</code> 的 <code>theme</code> 选项已被弃用，请改为使用包含数组的 <code>themes</code>。</li><li>Highlighter 不再维护内部默认主题上下文。<code>codeToHtml</code> 和 <code>codeToTokens</code> 需要 <code>theme</code> 选项。</li><li><code>codeToThemedTokens</code> 被重命名为 <code>codeToTokensBase</code>，并添加了更高级别的 <code>codeToTokens</code>。</li><li><code>codeToTokens</code> 默认将 <code>includeExplanation</code> 设置为 <code>false</code>。</li><li><code>.ansiToHtml</code> 已作为特殊语言 <code>ansi</code> 合并到 <code>.codeToHtml</code> 中。请改用 <code>.codeToHtml(code, { lang: &#39;ansi&#39; })</code>。</li><li><code>lineOptions</code> 已被弃用，取而代之的是完全可自定义的 <code>transforms</code> 选项。</li><li><code>LanguageRegistration</code> 的 <code>grammar</code> 字段被扁平化为 <code>LanguageRegistration</code> 本身，更多详细信息请参阅类型定义。</li></ul><h3 id="生态系统包" tabindex="-1">生态系统包 <a class="header-anchor" href="#生态系统包" aria-label="Permalink to “生态系统包”">​</a></h3><ul><li><code>shiki-twoslash</code> 已完全重写。它不再是 Shiki 高亮器的封装，而是一个 Shiki 转换器，可以集成到支持 Shiki 转换器的任何集成中。该包现在为 <a href="/packages/twoslash"><code>@shikijs/twoslash</code></a>。</li><li><code>shiki-twoslash</code> 的集成，例如 <code>gatsby-remark-shiki-twoslash</code> 等，将慢慢迁移到通用的 Shiki 版本。在此之前，您可以使用 <a href="/packages/rehype"><code>@shikijs/rehype</code></a> 或 <a href="/packages/markdown-it"><code>@shikijs/markdown-it</code></a> 将 Shiki 集成到这些元框架中。</li><li>引入了新的官方集成，如 <a href="/packages/monaco"><code>@shikijs/monaco</code></a>、<a href="/packages/cli"><code>@shikijs/cli</code></a>、<a href="/packages/rehype"><code>@shikijs/rehype</code></a>、<a href="/packages/markdown-it"><code>@shikijs/markdown-it</code></a>。</li><li>由于使用率低，<code>shiki-renderer-path</code> 和 <code>shiki-renderer-svg</code> 包正在被弃用。如果需要这些包，请提交一个问题并指出您的使用案例，我们愿意考虑重新引入。</li><li><code>vuepress-plugin-shiki</code> 被弃用，因为 <a href="https://github.com/vuejs/vuepress#status" target="_blank" rel="noreferrer">VuePress</a> 不再推荐。它的继任者 <a href="https://vitepress.zhcndoc.com/" target="_blank" rel="noreferrer">VitePress</a> 内置了 Shiki 集成。</li></ul><h2 id="从-shikiji-迁移" tabindex="-1">从 Shikiji 迁移 <a class="header-anchor" href="#从-shikiji-迁移" aria-label="Permalink to “从 Shikiji 迁移”">​</a></h2><p>如果您已经在使用 <a href="https://github.com/antfu/shikiji" target="_blank" rel="noreferrer">Shikiji</a>，首先确保您使用的是最新的小版本 v0.10。然后通过重命名包，迁移将非常简单：</p><ul><li><code>shikiji</code> -&gt; <code>shiki</code></li><li><code>shikiji-core</code> -&gt; <code>@shikijs/core</code></li><li><code>shikiji-twoslash</code> -&gt; <code>@shikijs/twoslash</code></li><li><code>shikiji-transformers</code> -&gt; <code>@shikijs/transformers</code></li><li><code>shikiji-monaco</code> -&gt; <code>@shikijs/monaco</code></li><li><code>shikiji-cli</code> -&gt; <code>@shikijs/cli</code></li><li><code>markdown-it-shikiji</code> -&gt; <code>@shikijs/markdown-it</code></li><li><code>rehype-shikiji</code> -&gt; <code>@shikijs/rehype</code></li></ul>',21)]))}const m=i(d,[["render",s]]);export{g as __pageData,m as default};
