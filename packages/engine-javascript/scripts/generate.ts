import fs from 'node:fs/promises'
import { expandRecursiveBackReference } from './utils'

interface ReplacementRecursiveBackReference {
  type: 'recursive-back-reference'
  regex: string
  groupName: string
  fallback: string
  recursive?: number
}

interface ReplacementStatic {
  type: 'static'
  regex: string
  replacement: string
}

type Replacement = ReplacementRecursiveBackReference | ReplacementStatic

const replacements: Replacement[] = [
  {
    // Subroutine recursive reference are not supported in JavaScript regex engine.
    // We expand a few levels of recursion to literals to simulate the behavior (it's incomplete tho)
    type: 'recursive-back-reference',
    regex: '(?<square>[^\\[\\]\\\\]|\\\\.|\\[\\g<square>*+\\])',
    groupName: 'square',
    fallback: '(?:[^\\[\\]\\\\])',
  },
  {
    type: 'recursive-back-reference',
    regex: '(?<url>(?>[^\\s()]+)|\\(\\g<url>*\\))',
    groupName: 'url',
    fallback: '(?>[^\\s()]+)',
  },
]

const result = replacements.map((r) => {
  switch (r.type) {
    case 'recursive-back-reference':
      return [r.regex, expandRecursiveBackReference(r.regex, r.groupName, r.fallback, r.recursive ?? 2)]
    case 'static':
      return [r.regex, r.replacement]
    default:
      throw new Error(`Unknown replacement type: ${(r as any).type}`)
  }
})

fs.writeFile(new URL('../src/replacements.ts', import.meta.url), `// Generated by script\n\nexport const replacements = ${JSON.stringify(result, null, 2)} as [string, string][]\n`, 'utf-8')
